@page
@model BrennanHunterPortfolio.Pages.ProjectStories.CapStoneModel
@{
}
<div style="margin-left: 15%; margin-right: 15%;">
    <div class="text-center my-3">
        <h1>SimulEAT : Diner Simulation</h1>
        <h2>Snow College Bachelor’s Degree Capstone Project</h2>
        <h5><a href="https://github.com/brennan801/Diner">Github Repository</a></h5>
    </div>
    
    <div>
        <h3>Purpose:</h3>
        <p>
            The purpose of this application is to simulate a diner. The user can input different fields like 
            the number of parties to come in, the number of tables they have, the number of waiters, and how 
            long it takes for a customer to eat.
        </p>
        <p>
            I used this project as my capstone project for my Bachelors of Software Engineering at Snow College. 
            So, the motivation behind the project was mainly academic. I wanted to show a complex, thread-safe 
            class system with the ability to run multiple threads. I also wanted to show that I could visualize 
            what was going on the user in real time. I’m really happy with the finished project and with the 
            patterns that I used while coding everything up.  
        </p>

        <h3>Team:</h3>
        <p>
            I was the sole developer for this project. I did have a project manager, Heber Allen, who gave me 
            requirements and specs that I had to complete. It was very useful to have a lead mind in this 
            project because it gave me a lot of direction and focus as I coded this up.  
        </p>

        <h3>Design:</h3>
        <p>
            In order to get my project manager and I on the same page when we first started the project, I 
            drew up a few diagrams.  
        </p>
        <p>
            The first diagram that I made was a classic UML class diagram to show what objects I would have 
            and how they relate to each other.  
        </p>
        <a href="~/resources/ClassDiagram.pdf">
             <button type="button" class="btn btn-secondary btn-lg mb-3">Class Diagram (PDF VIEW)</button>
        </a>
        <p>
                Next, I made a sequence diagram for the lifeline of a party. This way I could see what 
                events/functions should trigger different functions from the different actors that I had in my 
                project. 
        </p>
        <a href="~/resources/SequenceDiagram.pdf">
             <button type="button" class="btn btn-secondary btn-lg mb-3">Sequence Diagram (PDF VIEW)</button>
        </a>

        <h3>Implementation:</h3>

        <p>
            You can view all of my classes on github 
            <a href="https://github.com/brennan801/Diner/tree/blazor/JCsDiner">here</a> to see exactly how I 
            implemented my class design. There are a few special things that I did with my code that I would 
            like to display, the Producer Consumer Queue Pattern and the State Pattern.
        </p>
        <h5>Producer Consumer Queue: </h5>
        <p>
            I decided to create a producer consumer queue for each of the types of employees. That way, my 
            main program could be a producer thread that would create tasks for the employee and each employee 
            could be a consumer thread that would take the tasks off of the queue and complete them. Click 
            <a href="/Blogs/ProducerConsumer">here</a> to learn more about a producer consumer queue.  
        </p>
        <p>
            Eventually I drifted a little bit away from the traditional idea of the producer consumer queue, 
            but it was the foundation for how I set up the employees in this project.  
        </p>
        <h5>State Pattern:</h5>
        <p>
            I made a decision early on to not have each party be its own thread. Instead, each party would 
            progress with the thread of the restaurant. In order for this to work I had to have each party do 
            a certain task, or a certain amount of a task with each cycle of the restaurant. For instance, 
            if the party had been given its food, then the party would spend the cycle eating. If the party 
            was waiting to order, then the party would spend the cycle doing nothing.
        </p>
        <p>
            After my code started piling up on the “if else” statements, I realized I should implement the state 
            pattern. This way the party could easily do different behavior based on what state it was in, 
            without having all the “if else” statements. Click <a href="/Blog/StatePattern"></a>here to learn 
            more about the state pattern. 
        </p>
        
    </div>
</div>  